message Brand {
  enum State {
    // The brand was newly created.
    NEW = 1;
    // The brand was rejected from Faire.
    REJECTED = 2;
    // THe onboarding form was sent to the brand.
    ONBOARDING_FORM_SENT = 3;
    // The brand has started the onboarding form.
    ONBOARDING_FORM_STARTED = 4;
    // The brand has completed the onboarding form and we have their catalog.
    ONBOARDING_FORM_COMPLETED = 5;
    // The brand has had at least one product uploaded.
    PROFILE_STARTED = 6;
    // The brand has all of their products uploaded.
    ALL_PRODUCTS_UPLOADED = 7;

    PROFILE_IN_DESIGN_REVIEW = 8;

    PROFILE_IN_FINAL_REVIEW = 9;

    PROFILE_ACTIVATED = 10;

    WAITLISTED = 11;
  }

  optional string token = 1;

  /** Unique identifier of the brand that the brand gets to pick, used in the subdomain for their elevate page */
  optional string tokenAlias = 100;

  /** If true this Brand is owned by Faire. */
  optional bool isInternal = 84;

  /**
   * Generally all brands should be active. Unless we've determined that a brand has issues
   * that prevent it from being listed on IF. When a brand is inactive, all its products
   * are not displayed to customers, even if the product themselves are active.
   */
  optional bool active = 2;

  optional string name = 3;
  optional string shortDescription = 4;
  optional string description = 5;
  optional string url = 6;
  repeated string categories = 7;
  /**
   * These are categories where the brand does poorly so we derank the brand in those categories to
   * preserve relevance.
   */
  repeated Image images = 8;
  optional string facebookHandle = 9;
  optional string twitterHandle = 10;
  optional string instagramHandle = 11;
  optional string youtubeHandle = 12;
  optional string pinterestHandle = 13;
  /** This is a derived property from firstOrderMinimumAmountCents and reorderMinimumAmountCents. */
  optional int64 minimumOrderAmountCents = 14;
  /** The minimum order amount when a retailer is placing their first order with a brand. */
  optional int64 firstOrderMinimumAmountCents = 45;
  optional int64 reorderMinimumAmountCents = 46;

  /**
   * Optional. This defines where the brand is headquartered. Note that this can be different
   * from both where its products are made and where its products ship from.
   */
  optional string from = 16 [deprecated = true];
  /**
   * Made in information. For products made in the USA, we also specify the state and city,
   * if available. TODO: Move madeIn to an enumerated type.
   */
  optional string madeIn = 17;
  optional string madeInState = 26;
  optional string madeInCity = 27;

  /** This is where the brand is based. Typically where the founders live or are head quartered. */
  optional string basedIn = 37;
  optional string basedInState = 38;
  optional string basedInCity = 39;

  /** The brand is made using materials or techniques good for the environment. If null, unknown. */
  optional bool ecoFriendly = 28;
  /** The brand dedicates some of its proceeds to a charitable effort. If null, unknown. */
  optional bool charitable = 29;
  /** The brand is hand made. If null, unknown. */
  optional bool handMade = 30;
  /** The brand is women owned. If null, unknown. */
  optional bool womenOwned = 131;
  /** The brand's products are organic. If null, unknown. */
  optional bool organic = 132;
  /** The brand's products are small batch. If null, unknown. */
  optional bool smallBatch = 133;

  /** Whether the brand is sold on Amazon, either by the brand itself or third parties. */
  optional bool soldOnAmazon = 79;

  /** Read-only (generated by the server). */
  optional string madeInUsaDescription = 65;

  /** Read-only (generated by the server). */
  optional string handMadeDescription = 66;

  /** Writable. If the maker is charitable, what kind of charity do they do? */
  optional string charitableDescription = 67;

  /** Writabe. If the maker is eco friendly, what is eco friendly about it? */
  optional string ecoFriendlyDescription = 68;

  /** The brand is local to the location of the querying retailer. If null, unknown. */
  optional bool local = 40;

  /** A quote from the owner of this brand. */
  optional Quote ownerQuote = 60;

  /** An image, typically of the owner shown close to the owner's quote. */
  optional Image storyImage = 61;

  /** A url that links to either a Vimeo or a YouTube video. */
  optional string videoUrl = 62;

  /** A list of instagram images. */
  repeated Image socialMediaImages = 63;

  repeated Badge badges = 64;

  /**
   * Some brands have intrinsic lead times (even when not back-ordered).
   * Handmade brands for example can take four weeks to fulfil.
   */
  optional int64 leadTimeWeeks = 36 [deprecated = true];

  /**
   * The average lead time for this brand.
   */
  optional int64 leadTimeDays = 74;

  /**
   * When displaying a range for the lead time, this is the lower bound of that range.
   */
  optional int64 lowerBoundLeadTimeDays = 111;

  /**
   * When displaying a range for the lead time, this is the upper bound of that range.
   */
  optional int64 upperBoundLeadTimeDays = 112;

  /** Whether the current customer has favorited this brand. */
  optional bool favorite = 51;

  /**
   * This is a summarized view of the brand's likes or followers across all of its social media
   * platforms.
   */
  optional int64 likes = 18;
  /** Best guess on when the brand was created. Sometimes approximate. */
  optional int64 creationYear = 19;

  /** A squared image representing the brand to be used in tiles and in the app. */
  optional Image squaredImage = 82;

  /** The best image to display for a brand/category pair. */
  map<string, Image> squaredCategoryImages = 109;

  /** Email image and description are used for weekly emails to retailers. */
  optional Image emailHeroImage = 20;
  optional string emailDescription = 21;

  /** Number of followers across the main social networks. */
  optional int64 facebookFollowers = 32;
  optional int64 instagramFollowers = 33;
  optional int64 twitterFollowers = 34;

  /** If not null, this is a reward amount to show for this brand. */
  optional int64 firstOrderRewardAmountCents = 52;

  /** If not null, this is the default amount that will be applied if the retailer is eligible. */
  optional int64 defaultRewardAmountCents = 53;

  /** If not null, this is a discount percentage to show for this brand. */
  optional int64 firstOrderDiscountPercentage = 56;

  /** If not null, this is the default discount for this brand, if the retailer is eligible. */
  optional int64 defaultDiscountPercentage = 57;

  /**
   * If not empty, this is the list of terms available for this brand and the current retailer.
   * Empty is there is no retailer in the session, the frontend must re-fetch this brand before
   * going through flows that require this information.
   */
  repeated PaymentTerm availableTerms = 59;

  /** Is this the first order for this brand and retailer? */
  optional bool isFirstOrder = 72;

  /** Maximum amount that can be ordered on first order with free returns for this brand. */
  optional int64 firstOrderReturnsLimitCents = 73;

  optional bool zipCodeProtectionEnabled = 85;

  /** Timestamp of last renewal of Shopify access for this Brand. */
  optional int64 shopifyAccessRenewedAt = 87;

  /** Whether we should sync with the brands's POS, independent of any valid access tokens. */
  optional bool posSyncingEnabled = 88;

  optional string shopifyAccesstoken = 89;

  optional string shopifyShopName = 90;
  optional int64 firstActiveAt = 95;
  optional int64 activeProductsCount = 99;
  optional int64 lastProductAddedAt = 104;
  optional bool hasNewProducts = 105;

  repeated Membership memberships = 101;

  optional int64 elevateCommissionBps = 103;

  optional bool shipWithIndigoFair = 106;

  /**
   * If the brand is within the Boom exclusivity window and the retailer in the current session
   * has boom, this flag is true.
   */
  optional bool isBoomExclusive = 107;

  /** If the brand allows scheduled orders or not */
  optional bool allowsScheduledOrders = 108;

  // Next tag is 110

  /** Whether the brand is "new" for some reasonable definition of new to mean "newly added". */
  optional bool isNew = 110;

  /** The drop dead date after which the brand cannot fulfill thanksgiving orders. */
  optional int64 thanksgivingCutoffDate = 113;

  /** The drop dead date after which the brand cannot fulfill christmas orders. */
  optional int64 christmasCutoffDate = 114;

  /** If this flag is set, the lead time estimates are not computed automatically. */
  optional bool overrideLeadTimeEstimates = 115;

  optional ShipWithFairePreference shipWithFairePreference = 116;

  optional int64 vacationStartDate = 118;

  optional int64 vacationEndDate = 119;

  optional string vacationBannerText = 120;

  optional bool noConsumerResale = 126;

  optional bool acceptsReturns = 127;

  optional int64 returnOrdersDiscountBps = 128;

  optional BrandReviewsSummary brandReviewsSummary = 129;

  optional int64 version = 149;
  optional bool canSetPackagingAndHandlingCosts = 152;
  optional Shipment.ShippingLabelPrintingPreference shippingLabelPrintingPreference = 153;
}

message Color {
  optional string name = 1;
  optional string rgb = 2;
}

message ProductOption {
  optional string token = 1;

  /** Whether this product option is active. */
  optional bool active = 2;

  /** The option is marked as deleted, it won't be returned in any API anymore. */
  optional bool deleted = 17;

  /** The group name is the name of the option "type". Examples are Colors, Scents, Size, etc. */
  optional string groupName = 3;

  /**
    * Options can be nested to support more complex option. For example an iPhone case can be Blue
    * and for iPhone 7+.
    */
  optional string parentToken = 4;

  /** The name of this product option. In case of color it could be the name of the color. */
  optional string name = 5;

  /** The SKU number assigned to this product option by the brand. */
  optional string brandCode = 6;

  optional string description = 7;

  /** An optional color derived from the name of the color of the option. */
  optional Color color = 8;

  /**
    * By default the wholesale price should come from the product wholesale price.
    * This field allows overrides in the rare cases when the wholesale price is different.
    */
  optional int64 wholesalePriceCents = 9 [deprecated = true];

  /** This works very similarly to the wholesale price. */
  optional int64 retailPriceCents = 10 [deprecated = true];

  /** Also known as case size or case quantity, this is the unit in which this option ships. */
  optional int64 unitMultiplier = 11 [deprecated = true];

  repeated Image images = 12;

  optional int64 backorderedUntilDate = 13;

  /** Whether this product option offers testers. */
  optional bool hasTesters = 14;

  /** If set, only allow adding to cart at most this quantity. */
  optional int64 availableUnits = 15;

  /** The measurements of this specific option. */
  optional Measurements measurements = 16;

  /** The SKU number assigned to this product option by the brand for testers. */
  optional string testerBrandCode = 18;

  optional string productToken = 19;

  optional int64 version = 49;
}

message Product {
  optional string token = 1;

  /** To be used only internal by the server, not for external APIs. */
  optional int64 id = 22 [redacted = true];

  /** We expose the version for caching purposes. */
  optional int64 version = 30;

  optional string brandToken = 2;

  /**
   * If the brandToken was overwritten because of Maker Mix and Match,
   * this keeps the original token. In all other cases, it's just a copy of the brand token.
   */
  optional string originalBrandToken = 31;

  /**
    * Only active products are displayed to customer. Note that active products that belong to
    * inactive brands are not displayed to customers.
    */
  optional bool active = 3;
  optional string name = 4;
  optional string shortDescription = 5;
  optional string description = 6;
  optional int64 wholesalePriceCents = 7;
  optional int64 retailPriceCents = 8;

  /** If this product offers testers, this is the price of each tester (regardless of option). */
  optional int64 testerPriceCents = 27;

  /** Also known as case size or case quantity. This is the unit size that this product ships in. */
  optional int64 unitMultiplier = 9;
  optional string url = 10;
  optional Measurements measurements = 11;
  repeated string categories = 13;
  repeated ProductOption options = 14;
  optional int64 amazonReviewCount = 15 [redacted = true];
  optional string amazonUrl = 16 [redacted = true];
  optional int64 lowestOnlinePriceCents = 24;
  repeated Image images = 17;
  optional bool manualRecommendation = 18 [redacted = true];
  repeated RecommenderType recommenders = 19 [redacted = true];

  /** A score we use for globally ranking products. */
  optional int64 score = 20 [redacted = true];

  /** Used to experiment with different scoring. */
  optional int64 newScore = 29 [redacted = true];

  /** Whether the customer has favorited this product. */
  optional bool favorite = 21;

  /**
   * This product was tagged as a best seller for its maker. This is not a global best seller flag,
   * just local to the maker.
   */
  optional bool makerBestSeller = 23;

  /**
   * If set, this is used to sort this product in the maker profile page.
   * The ranking still lists maker best sellers first, then it sorts by this field.
   */
  optional int64 makerRelativePosition = 26;

  optional int64 backorderedUntilDate = 25;

  /** Whether the product is "new" for some reasonable definition of new to mean "newly added". */
  optional bool isNew = 32;

  /**
   * By default all products are returnable but some of our products are marked as non returnable
   * (customer items, perishables, etc.)
   */
  optional bool returnable = 33;

  /** Whether or not the product is a custom one-off product. */
  optional bool custom = 34;

  optional int64 createdAt = 50;
  optional int64 updatedAt = 51 [redacted = true];

  // Tags are out of order, next tag is 34.
}


message Image {
  optional string token = 1;
  optional int64 width = 2;
  optional int64 height = 3;
  optional int64 sequence = 4;
  optional string url = 5;
  optional Type type = 6;
  /** A distinct list of tags associated with this image */
  repeated string tags = 7;

  /**
   * This type allows us to distinguish between image types in all contexts
   * where that might be ambiguous. For example, when a product has multiple types of images
   * attached to it.
   */
  enum Type {
    PRODUCT = 1;
    PACKAGING = 2;
    LIFESTYLE = 3;
    DEFAULT_BRAND = 4;
    /** A squared image for a brand with a light color pallete. */
    LIGHT_TILE = 5;
    /** A squared image for a brand with a medium color pallete. */
    MEDIUM_TILE = 6;
    /** A squared image for a brand with a dark color pallete. */
    DARK_TILE = 7;
    /** A landing page image for brand partnerships with a light color palette. */
    LIGHT_WHOLESALE_PORTAL_LANDING = 8;
    /** A landing page image for brand partnerships with a dark color palette. */
    DARK_WHOLESALE_PORTAL_LANDING = 9;
    /** A signup page image for brand partnerships with a light color palette. */
    LIGHT_WHOLESALE_PORTAL_SIGNUP = 10;
    /** A signup page image for brand partnerships with a dark color palette. */
    DARK_WHOLESALE_PORTAL_SIGNUP = 11;
    /** Can be the hero image for a displayable entity. Each entity can have at most one Hero image. */
    HERO = 12;

    MOBILE = 13;
    DESKTOP = 14;

    /** Used to show that the type of this image is represented as a tag */
    TAGGED = 15;
  }
}


message Category {
  optional string name = 1;
  repeated Category subCategories = 2;
  /**
   * Product based categories are categories that are attached to a taxonomy property
   * of a certain product (Home Decor, Candles, Umbrellas).
   */
  optional bool isProductBased = 3;

  /**
   * If this is set, the frontend will deep link from the category list view to the products
   * that the maker has with that category. This was first implemented for the "Holidays"
   * category so that we could support landing on the "Holidays" category page within a maker.
   */
  optional string linkToMakerCategory = 4;

  /**
  * Featured categories are given a prominent position in the sidebar
  */
  optional bool isFeatured = 5;

  optional string token = 6;
}

enum SortOrder {
  ASC = 1;
  DESC = 2;
}

enum MakerValue {
  ECO_FRIENDLY = 1;
  HAND_MADE = 2;
  NOT_SOLD_ON_AMAZON = 3;
  CHARITABLE = 4;
  MADE_IN_USA = 5;
}

enum LeadTime {
  THREE_OR_LESS_DAYS = 1;
  SIX_OR_LESS_DAYS = 2;
  NINE_OR_LESS_DAYS = 3;
  FOURTEEN_OR_LESS_DAYS = 4;
}

message PaginationData {
  optional int64 pageNumber = 1;
  optional int64 pageSize = 2;
  optional int64 pageCount = 3;
  optional int64 totalResults = 4;
}

enum SearchMakersWithFiltersSortBy {
  NAME = 1;
  SCORE = 2;
  FIRST_ACTIVE_AT = 3;
  MINIMUM = 4;
}

message SearchMakersWithFiltersRequest {
  optional string name = 1;
  repeated string states = 2;
  repeated MakerValue makerValues = 3;
  optional string category = 4;
  optional uint64 maximumMakerMinimumCents = 5;
  repeated uint64 makerMinimumThresholds = 6;
  optional LeadTime leadTime = 7;
  optional PaginationData paginationData = 8;
  optional SortOrder sortOrder = 9;
  optional SearchMakersWithFiltersSortBy sortBy = 10;
  optional int64 maxProductsPerBrand = 11 [default = 4];
}

message SearchMakersWithFiltersResponse {
  message ProductsForCategory {
    repeated Product products = 1;
    /** If null, the above products are for the brand in general rather than a specific category. */
    optional string category = 2;
  }

  map<string, uint64> makerValuesPreview = 1;
  map<string, uint64> basedInStatePreview = 2;
  map<string, uint64> categoriesPreview = 3;
  map<uint64, uint64> makerMinimumsPreview = 4;
  map<string, uint64> leadTimePreview = 5;
  repeated Brand brands = 6;
  optional PaginationData paginationData = 7;
  optional SortOrder sortOrder = 8;
  optional SearchMakersWithFiltersSortBy sortBy = 9;
  map<string, ProductsForCategory> brandProducts = 10;
  /**
   * Unique ID for the request. Must be supplied to /click-track endpoint
   * whenever a result from this response is clicked by the user.
   */
  optional string requestId = 11;
}